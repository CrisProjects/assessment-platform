#!/usr/bin/env python3
"""
WSGI entry point para producci√≥n en Railway - Versi√≥n Simplificada
"""
import os
import logging
import time

# Configuraci√≥n de logging para producci√≥n
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)

logger = logging.getLogger(__name__)

# Importar la aplicaci√≥n primero
try:
    logger.info("üîÑ WSGI: Importando aplicaci√≥n...")
    from app import app
    logger.info("‚úÖ WSGI: Aplicaci√≥n importada exitosamente")
except Exception as e:
    logger.error(f"‚ùå WSGI: Error importando aplicaci√≥n: {e}")
    raise

# Variable requerida por gunicorn (debe estar antes de cualquier inicializaci√≥n)
application = app

# Intentar la inicializaci√≥n despu√©s de definir application
try:
    logger.info("üîÑ WSGI: Iniciando inicializaci√≥n de base de datos...")
    with app.app_context():
        from app import auto_initialize_database
        auto_initialize_database()
    logger.info("‚úÖ WSGI: Inicializaci√≥n de base de datos completada")
except Exception as e:
    logger.error(f"‚ö†Ô∏è WSGI: Error en inicializaci√≥n de BD (continuando): {e}")
    # No fallar el deployment por problemas de inicializaci√≥n

# Configuraci√≥n espec√≠fica para Railway
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)